State 41 conflicts: 1 shift/reduce
State 226 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROGRAM $end

    1 PROGRAM: DECL
    2        | DECL PROGRAM

    3 DECL: VAR_DECL
    4     | FUNCTION_DECL
    5     | CLASS_DECL
    6     | INTERFACE_DECL

    7 VAR_DECL: VARIABLE opt_semicolon
    8         | ERR

    9 $@1: %empty

   10 $@2: %empty

   11 VAR_DECL: identifier $@1 identifier $@2 opt_semicolon

   12 VARIABLE: vip_const TYPE identifier
   13         | TYPE identifier

   14 $@3: %empty

   15 VARIABLE_PLUS: VARIABLE opt_coma $@3 VARIABLE_PLUS
   16              | VARIABLE

   17 TYPE: vip_int
   18     | vip_double
   19     | vip_bool
   20     | vip_string
   21     | TYPE opt_left_bracket opt_right_bracket

   22 $@4: %empty

   23 $@5: %empty

   24 FUNCTION_DECL: TYPE identifier $@4 opt_left_parentheses $@5 FORMALS opt_right_parentheses STMT_BLOCK

   25 $@6: %empty

   26 $@7: %empty

   27 FUNCTION_DECL: vip_void identifier $@6 opt_left_parentheses $@7 FORMALS opt_right_parentheses STMT_BLOCK

   28 FORMALS: VARIABLE_PLUS
   29        | %empty

   30 $@8: %empty

   31 CLASS_DECL: vip_class identifier $@8 EXTENDS IMPLEMENTS opt_left_brace FIELD_ASTERISK opt_right_brace

   32 EXTENDS: vip_extends identifier
   33        | %empty
   34        | ERR

   35 IMPLEMENTS: vip_implements IDENTIFIER_PLUS
   36           | %empty
   37           | ERR

   38 IDENTIFIER_PLUS: identifier opt_coma IDENTIFIER_PLUS
   39                | identifier
   40                | ERR

   41 FIELD_ASTERISK: FIELD FIELD_ASTERISK
   42               | %empty

   43 FIELD: VAR_DECL
   44      | FUNCTION_DECL

   45 INTERFACE_DECL: vip_interface identifier opt_left_brace PROTOTYPE_ASTERISK opt_right_brace

   46 PROTOTYPE_ASTERISK: PROTOTYPE PROTOTYPE_ASTERISK
   47                   | %empty
   48                   | ERR

   49 PROTOTYPE: TYPE identifier opt_left_parentheses FORMALS opt_right_parentheses opt_semicolon
   50          | vip_void identifier opt_left_parentheses FORMALS opt_right_parentheses opt_semicolon

   51 STMT_BLOCK: opt_left_brace VARS STMTS opt_right_brace

   52 VARS: VARIABLE opt_semicolon VARS
   53     | %empty

   54 STMTS: STATEMENT STMTS
   55      | %empty

   56 STATEMENT: EXPRESSION_Q opt_semicolon
   57          | IF_STMT
   58          | WHILE_STMT
   59          | FOR_STMT
   60          | BREAK_STMT
   61          | RETURN_STMT
   62          | PRINT_STMT
   63          | STMT_BLOCK
   64          | ERR

   65 IF_STMT: vip_if opt_left_parentheses EXPRESSION opt_right_parentheses STATEMENT ELSE_STMT

   66 ELSE_STMT: vip_else STATEMENT
   67          | %empty

   68 WHILE_STMT: vip_while opt_left_parentheses EXPRESSION opt_right_parentheses STATEMENT

   69 FOR_STMT: vip_for opt_left_parentheses EXPRESSION_Q opt_semicolon EXPRESSION opt_semicolon EXPRESSION_Q opt_right_parentheses STATEMENT

   70 RETURN_STMT: vip_return EXPRESSION_Q opt_semicolon

   71 BREAK_STMT: vip_break opt_semicolon

   72 PRINT_STMT: vip_Print opt_left_parentheses EXPRESSION_PLUS opt_right_parentheses opt_semicolon

   73 EXPRESSION_Q: EXPRESSION
   74             | %empty

   75 EXPRESSION_PLUS: EXPRESSION opt_coma EXPRESSION_PLUS
   76                | EXPRESSION

   77 EXPRESSION: VALUE opt_assign EXPRESSION
   78           | CONST
   79           | VALUE
   80           | vip_this
   81           | CALL
   82           | opt_left_parentheses EXPRESSION opt_right_parentheses
   83           | EXPRESSION opt_plus EXPRESSION
   84           | EXPRESSION opt_minus EXPRESSION
   85           | EXPRESSION opt_divide EXPRESSION
   86           | EXPRESSION opt_times EXPRESSION
   87           | EXPRESSION opt_mod EXPRESSION
   88           | opt_minus EXPRESSION
   89           | EXPRESSION opt_lower EXPRESSION
   90           | EXPRESSION opt_lower_equal EXPRESSION
   91           | EXPRESSION opt_greater EXPRESSION
   92           | EXPRESSION opt_greater_equal EXPRESSION
   93           | EXPRESSION opt_equal EXPRESSION
   94           | EXPRESSION opt_not_equal EXPRESSION
   95           | EXPRESSION opt_and EXPRESSION
   96           | EXPRESSION opt_or EXPRESSION
   97           | opt_not EXPRESSION
   98           | vip_New opt_left_parentheses identifier opt_right_parentheses
   99           | vip_NewArray opt_left_parentheses EXPRESSION opt_coma TYPE opt_right_parentheses
  100           | vip_ReadInteger opt_left_parentheses opt_right_parentheses
  101           | vip_ReadLine opt_left_parentheses opt_right_parentheses
  102           | vip_Malloc opt_left_parentheses EXPRESSION opt_right_parentheses

  103 VALUE: identifier
  104      | EXPRESSION VALUE_P

  105 VALUE_P: opt_dot identifier
  106        | opt_left_bracket EXPRESSION opt_right_bracket

  107 CALL: identifier opt_left_parentheses ACTUAL opt_right_parentheses
  108     | EXPRESSION opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

  110 LIB_CALL: vip_GetByte opt_left_parentheses EXPRESSION opt_right_parentheses
  111         | vip_SetByte opt_left_parentheses EXPRESSION opt_coma EXPRESSION opt_right_parentheses

  112 ACTUAL: EXPRESSION_PLUS
  113       | %empty

  114 CONST: num_int
  115      | num_hex
  116      | num_double
  117      | val_bool
  118      | val_string
  119      | vip_null

  120 ERR: error opt_left_brace
  121    | error opt_right_brace
  122    | error opt_left_bracket
  123    | error opt_right_bracket
  124    | error opt_left_parentheses
  125    | error opt_right_parentheses
  126    | error opt_semicolon
  127    | error VARIABLE


Terminals, with rules where they appear

$end (0) 0
error (256) 120 121 122 123 124 125 126 127
vip_void (258) 27 50
vip_int (259) 17
vip_double (260) 18
vip_bool (261) 19
vip_string (262) 20
vip_class (263) 31
vip_interface (264) 45
vip_null (265) 119
vip_this (266) 80
vip_extends (267) 32
vip_implements (268) 35
vip_for (269) 69
vip_while (270) 68
vip_if (271) 65
vip_else (272) 66
vip_return (273) 70
vip_break (274) 71
vip_New (275) 98
vip_NewArray (276) 99
vip_Print (277) 72
vip_ReadInteger (278) 100
vip_ReadLine (279) 101
vip_Malloc (280) 102
vip_GetByte (281) 110
vip_SetByte (282) 111
vip_const (283) 12
identifier (284) 11 12 13 24 27 31 32 38 39 45 49 50 98 103 105 107
    108
num_int (285) 114
num_hex (286) 115
num_double (287) 116
val_string (288) 118
val_bool (289) 117
opt_plus (290) 83
opt_minus (291) 84 88
opt_times (292) 86
opt_divide (293) 85
opt_mod (294) 87
opt_lower (295) 89
opt_lower_equal (296) 90
opt_greater (297) 91
opt_greater_equal (298) 92
opt_assign (299) 77
opt_equal (300) 93
opt_not_equal (301) 94
opt_and (302) 95
opt_or (303) 96
opt_not (304) 97
opt_semicolon (305) 7 11 49 50 52 56 69 70 71 72 126
opt_dot (306) 105 108 109
opt_coma (307) 15 38 75 99 111
opt_left_bracket (308) 21 106 122
opt_right_bracket (309) 21 106 123
opt_left_brace (310) 31 45 51 120
opt_right_brace (311) 31 45 51 121
opt_left_parentheses (312) 24 27 49 50 65 68 69 72 82 98 99 100 101
    102 107 108 109 110 111 124
opt_right_parentheses (313) 24 27 49 50 65 68 69 72 82 98 99 100 101
    102 107 108 109 110 111 125


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
PROGRAM (60)
    on left: 1 2, on right: 0 2
DECL (61)
    on left: 3 4 5 6, on right: 1 2
VAR_DECL (62)
    on left: 7 8 11, on right: 3 43
$@1 (63)
    on left: 9, on right: 11
$@2 (64)
    on left: 10, on right: 11
VARIABLE (65)
    on left: 12 13, on right: 7 15 16 52 127
VARIABLE_PLUS (66)
    on left: 15 16, on right: 15 28
$@3 (67)
    on left: 14, on right: 15
TYPE (68)
    on left: 17 18 19 20 21, on right: 12 13 21 24 49 99
FUNCTION_DECL (69)
    on left: 24 27, on right: 4 44
$@4 (70)
    on left: 22, on right: 24
$@5 (71)
    on left: 23, on right: 24
$@6 (72)
    on left: 25, on right: 27
$@7 (73)
    on left: 26, on right: 27
FORMALS (74)
    on left: 28 29, on right: 24 27 49 50
CLASS_DECL (75)
    on left: 31, on right: 5
$@8 (76)
    on left: 30, on right: 31
EXTENDS (77)
    on left: 32 33 34, on right: 31
IMPLEMENTS (78)
    on left: 35 36 37, on right: 31
IDENTIFIER_PLUS (79)
    on left: 38 39 40, on right: 35 38
FIELD_ASTERISK (80)
    on left: 41 42, on right: 31 41
FIELD (81)
    on left: 43 44, on right: 41
INTERFACE_DECL (82)
    on left: 45, on right: 6
PROTOTYPE_ASTERISK (83)
    on left: 46 47 48, on right: 45 46
PROTOTYPE (84)
    on left: 49 50, on right: 46
STMT_BLOCK (85)
    on left: 51, on right: 24 27 63
VARS (86)
    on left: 52 53, on right: 51 52
STMTS (87)
    on left: 54 55, on right: 51 54
STATEMENT (88)
    on left: 56 57 58 59 60 61 62 63 64, on right: 54 65 66 68 69
IF_STMT (89)
    on left: 65, on right: 57
ELSE_STMT (90)
    on left: 66 67, on right: 65
WHILE_STMT (91)
    on left: 68, on right: 58
FOR_STMT (92)
    on left: 69, on right: 59
RETURN_STMT (93)
    on left: 70, on right: 61
BREAK_STMT (94)
    on left: 71, on right: 60
PRINT_STMT (95)
    on left: 72, on right: 62
EXPRESSION_Q (96)
    on left: 73 74, on right: 56 69 70
EXPRESSION_PLUS (97)
    on left: 75 76, on right: 72 75 112
EXPRESSION (98)
    on left: 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94
    95 96 97 98 99 100 101 102, on right: 65 68 69 73 75 76 77 82 83
    84 85 86 87 88 89 90 91 92 93 94 95 96 97 99 102 104 106 108 109
    110 111
VALUE (99)
    on left: 103 104, on right: 77 79
VALUE_P (100)
    on left: 105 106, on right: 104
CALL (101)
    on left: 107 108 109, on right: 81
LIB_CALL (102)
    on left: 110 111, on right: 109
ACTUAL (103)
    on left: 112 113, on right: 107 108 109
CONST (104)
    on left: 114 115 116 117 118 119, on right: 78
ERR (105)
    on left: 120 121 122 123 124 125 126 127, on right: 8 34 37 40
    48 64


State 0

    0 $accept: . PROGRAM $end

    error          shift, and go to state 1
    vip_void       shift, and go to state 2
    vip_int        shift, and go to state 3
    vip_double     shift, and go to state 4
    vip_bool       shift, and go to state 5
    vip_string     shift, and go to state 6
    vip_class      shift, and go to state 7
    vip_interface  shift, and go to state 8
    vip_const      shift, and go to state 9
    identifier     shift, and go to state 10

    PROGRAM         go to state 11
    DECL            go to state 12
    VAR_DECL        go to state 13
    VARIABLE        go to state 14
    TYPE            go to state 15
    FUNCTION_DECL   go to state 16
    CLASS_DECL      go to state 17
    INTERFACE_DECL  go to state 18
    ERR             go to state 19


State 1

  120 ERR: error . opt_left_brace
  121    | error . opt_right_brace
  122    | error . opt_left_bracket
  123    | error . opt_right_bracket
  124    | error . opt_left_parentheses
  125    | error . opt_right_parentheses
  126    | error . opt_semicolon
  127    | error . VARIABLE

    vip_int                shift, and go to state 3
    vip_double             shift, and go to state 4
    vip_bool               shift, and go to state 5
    vip_string             shift, and go to state 6
    vip_const              shift, and go to state 9
    opt_semicolon          shift, and go to state 20
    opt_left_bracket       shift, and go to state 21
    opt_right_bracket      shift, and go to state 22
    opt_left_brace         shift, and go to state 23
    opt_right_brace        shift, and go to state 24
    opt_left_parentheses   shift, and go to state 25
    opt_right_parentheses  shift, and go to state 26

    VARIABLE  go to state 27
    TYPE      go to state 28


State 2

   27 FUNCTION_DECL: vip_void . identifier $@6 opt_left_parentheses $@7 FORMALS opt_right_parentheses STMT_BLOCK

    identifier  shift, and go to state 29


State 3

   17 TYPE: vip_int .

    $default  reduce using rule 17 (TYPE)


State 4

   18 TYPE: vip_double .

    $default  reduce using rule 18 (TYPE)


State 5

   19 TYPE: vip_bool .

    $default  reduce using rule 19 (TYPE)


State 6

   20 TYPE: vip_string .

    $default  reduce using rule 20 (TYPE)


State 7

   31 CLASS_DECL: vip_class . identifier $@8 EXTENDS IMPLEMENTS opt_left_brace FIELD_ASTERISK opt_right_brace

    identifier  shift, and go to state 30


State 8

   45 INTERFACE_DECL: vip_interface . identifier opt_left_brace PROTOTYPE_ASTERISK opt_right_brace

    identifier  shift, and go to state 31


State 9

   12 VARIABLE: vip_const . TYPE identifier

    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6

    TYPE  go to state 32


State 10

   11 VAR_DECL: identifier . $@1 identifier $@2 opt_semicolon

    $default  reduce using rule 9 ($@1)

    $@1  go to state 33


State 11

    0 $accept: PROGRAM . $end

    $end  shift, and go to state 34


State 12

    1 PROGRAM: DECL .
    2        | DECL . PROGRAM

    error          shift, and go to state 1
    vip_void       shift, and go to state 2
    vip_int        shift, and go to state 3
    vip_double     shift, and go to state 4
    vip_bool       shift, and go to state 5
    vip_string     shift, and go to state 6
    vip_class      shift, and go to state 7
    vip_interface  shift, and go to state 8
    vip_const      shift, and go to state 9
    identifier     shift, and go to state 10

    $end  reduce using rule 1 (PROGRAM)

    PROGRAM         go to state 35
    DECL            go to state 12
    VAR_DECL        go to state 13
    VARIABLE        go to state 14
    TYPE            go to state 15
    FUNCTION_DECL   go to state 16
    CLASS_DECL      go to state 17
    INTERFACE_DECL  go to state 18
    ERR             go to state 19


State 13

    3 DECL: VAR_DECL .

    $default  reduce using rule 3 (DECL)


State 14

    7 VAR_DECL: VARIABLE . opt_semicolon

    opt_semicolon  shift, and go to state 36


State 15

   13 VARIABLE: TYPE . identifier
   21 TYPE: TYPE . opt_left_bracket opt_right_bracket
   24 FUNCTION_DECL: TYPE . identifier $@4 opt_left_parentheses $@5 FORMALS opt_right_parentheses STMT_BLOCK

    identifier        shift, and go to state 37
    opt_left_bracket  shift, and go to state 38


State 16

    4 DECL: FUNCTION_DECL .

    $default  reduce using rule 4 (DECL)


State 17

    5 DECL: CLASS_DECL .

    $default  reduce using rule 5 (DECL)


State 18

    6 DECL: INTERFACE_DECL .

    $default  reduce using rule 6 (DECL)


State 19

    8 VAR_DECL: ERR .

    $default  reduce using rule 8 (VAR_DECL)


State 20

  126 ERR: error opt_semicolon .

    $default  reduce using rule 126 (ERR)


State 21

  122 ERR: error opt_left_bracket .

    $default  reduce using rule 122 (ERR)


State 22

  123 ERR: error opt_right_bracket .

    $default  reduce using rule 123 (ERR)


State 23

  120 ERR: error opt_left_brace .

    $default  reduce using rule 120 (ERR)


State 24

  121 ERR: error opt_right_brace .

    $default  reduce using rule 121 (ERR)


State 25

  124 ERR: error opt_left_parentheses .

    $default  reduce using rule 124 (ERR)


State 26

  125 ERR: error opt_right_parentheses .

    $default  reduce using rule 125 (ERR)


State 27

  127 ERR: error VARIABLE .

    $default  reduce using rule 127 (ERR)


State 28

   13 VARIABLE: TYPE . identifier
   21 TYPE: TYPE . opt_left_bracket opt_right_bracket

    identifier        shift, and go to state 39
    opt_left_bracket  shift, and go to state 38


State 29

   27 FUNCTION_DECL: vip_void identifier . $@6 opt_left_parentheses $@7 FORMALS opt_right_parentheses STMT_BLOCK

    $default  reduce using rule 25 ($@6)

    $@6  go to state 40


State 30

   31 CLASS_DECL: vip_class identifier . $@8 EXTENDS IMPLEMENTS opt_left_brace FIELD_ASTERISK opt_right_brace

    $default  reduce using rule 30 ($@8)

    $@8  go to state 41


State 31

   45 INTERFACE_DECL: vip_interface identifier . opt_left_brace PROTOTYPE_ASTERISK opt_right_brace

    opt_left_brace  shift, and go to state 42


State 32

   12 VARIABLE: vip_const TYPE . identifier
   21 TYPE: TYPE . opt_left_bracket opt_right_bracket

    identifier        shift, and go to state 43
    opt_left_bracket  shift, and go to state 38


State 33

   11 VAR_DECL: identifier $@1 . identifier $@2 opt_semicolon

    identifier  shift, and go to state 44


State 34

    0 $accept: PROGRAM $end .

    $default  accept


State 35

    2 PROGRAM: DECL PROGRAM .

    $default  reduce using rule 2 (PROGRAM)


State 36

    7 VAR_DECL: VARIABLE opt_semicolon .

    $default  reduce using rule 7 (VAR_DECL)


State 37

   13 VARIABLE: TYPE identifier .
   24 FUNCTION_DECL: TYPE identifier . $@4 opt_left_parentheses $@5 FORMALS opt_right_parentheses STMT_BLOCK

    opt_left_parentheses  reduce using rule 22 ($@4)
    $default              reduce using rule 13 (VARIABLE)

    $@4  go to state 45


State 38

   21 TYPE: TYPE opt_left_bracket . opt_right_bracket

    opt_right_bracket  shift, and go to state 46


State 39

   13 VARIABLE: TYPE identifier .

    $default  reduce using rule 13 (VARIABLE)


State 40

   27 FUNCTION_DECL: vip_void identifier $@6 . opt_left_parentheses $@7 FORMALS opt_right_parentheses STMT_BLOCK

    opt_left_parentheses  shift, and go to state 47


State 41

   31 CLASS_DECL: vip_class identifier $@8 . EXTENDS IMPLEMENTS opt_left_brace FIELD_ASTERISK opt_right_brace

    error        shift, and go to state 1
    vip_extends  shift, and go to state 48

    error           [reduce using rule 33 (EXTENDS)]
    vip_implements  reduce using rule 33 (EXTENDS)
    opt_left_brace  reduce using rule 33 (EXTENDS)

    EXTENDS  go to state 49
    ERR      go to state 50


State 42

   45 INTERFACE_DECL: vip_interface identifier opt_left_brace . PROTOTYPE_ASTERISK opt_right_brace

    error       shift, and go to state 1
    vip_void    shift, and go to state 51
    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6

    opt_right_brace  reduce using rule 47 (PROTOTYPE_ASTERISK)

    TYPE                go to state 52
    PROTOTYPE_ASTERISK  go to state 53
    PROTOTYPE           go to state 54
    ERR                 go to state 55


State 43

   12 VARIABLE: vip_const TYPE identifier .

    $default  reduce using rule 12 (VARIABLE)


State 44

   11 VAR_DECL: identifier $@1 identifier . $@2 opt_semicolon

    $default  reduce using rule 10 ($@2)

    $@2  go to state 56


State 45

   24 FUNCTION_DECL: TYPE identifier $@4 . opt_left_parentheses $@5 FORMALS opt_right_parentheses STMT_BLOCK

    opt_left_parentheses  shift, and go to state 57


State 46

   21 TYPE: TYPE opt_left_bracket opt_right_bracket .

    $default  reduce using rule 21 (TYPE)


State 47

   27 FUNCTION_DECL: vip_void identifier $@6 opt_left_parentheses . $@7 FORMALS opt_right_parentheses STMT_BLOCK

    $default  reduce using rule 26 ($@7)

    $@7  go to state 58


State 48

   32 EXTENDS: vip_extends . identifier

    identifier  shift, and go to state 59


State 49

   31 CLASS_DECL: vip_class identifier $@8 EXTENDS . IMPLEMENTS opt_left_brace FIELD_ASTERISK opt_right_brace

    error           shift, and go to state 1
    vip_implements  shift, and go to state 60

    opt_left_brace  reduce using rule 36 (IMPLEMENTS)

    IMPLEMENTS  go to state 61
    ERR         go to state 62


State 50

   34 EXTENDS: ERR .

    $default  reduce using rule 34 (EXTENDS)


State 51

   50 PROTOTYPE: vip_void . identifier opt_left_parentheses FORMALS opt_right_parentheses opt_semicolon

    identifier  shift, and go to state 63


State 52

   21 TYPE: TYPE . opt_left_bracket opt_right_bracket
   49 PROTOTYPE: TYPE . identifier opt_left_parentheses FORMALS opt_right_parentheses opt_semicolon

    identifier        shift, and go to state 64
    opt_left_bracket  shift, and go to state 38


State 53

   45 INTERFACE_DECL: vip_interface identifier opt_left_brace PROTOTYPE_ASTERISK . opt_right_brace

    opt_right_brace  shift, and go to state 65


State 54

   46 PROTOTYPE_ASTERISK: PROTOTYPE . PROTOTYPE_ASTERISK

    error       shift, and go to state 1
    vip_void    shift, and go to state 51
    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6

    opt_right_brace  reduce using rule 47 (PROTOTYPE_ASTERISK)

    TYPE                go to state 52
    PROTOTYPE_ASTERISK  go to state 66
    PROTOTYPE           go to state 54
    ERR                 go to state 55


State 55

   48 PROTOTYPE_ASTERISK: ERR .

    $default  reduce using rule 48 (PROTOTYPE_ASTERISK)


State 56

   11 VAR_DECL: identifier $@1 identifier $@2 . opt_semicolon

    opt_semicolon  shift, and go to state 67


State 57

   24 FUNCTION_DECL: TYPE identifier $@4 opt_left_parentheses . $@5 FORMALS opt_right_parentheses STMT_BLOCK

    $default  reduce using rule 23 ($@5)

    $@5  go to state 68


State 58

   27 FUNCTION_DECL: vip_void identifier $@6 opt_left_parentheses $@7 . FORMALS opt_right_parentheses STMT_BLOCK

    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6
    vip_const   shift, and go to state 9

    $default  reduce using rule 29 (FORMALS)

    VARIABLE       go to state 69
    VARIABLE_PLUS  go to state 70
    TYPE           go to state 28
    FORMALS        go to state 71


State 59

   32 EXTENDS: vip_extends identifier .

    $default  reduce using rule 32 (EXTENDS)


State 60

   35 IMPLEMENTS: vip_implements . IDENTIFIER_PLUS

    error       shift, and go to state 1
    identifier  shift, and go to state 72

    IDENTIFIER_PLUS  go to state 73
    ERR              go to state 74


State 61

   31 CLASS_DECL: vip_class identifier $@8 EXTENDS IMPLEMENTS . opt_left_brace FIELD_ASTERISK opt_right_brace

    opt_left_brace  shift, and go to state 75


State 62

   37 IMPLEMENTS: ERR .

    $default  reduce using rule 37 (IMPLEMENTS)


State 63

   50 PROTOTYPE: vip_void identifier . opt_left_parentheses FORMALS opt_right_parentheses opt_semicolon

    opt_left_parentheses  shift, and go to state 76


State 64

   49 PROTOTYPE: TYPE identifier . opt_left_parentheses FORMALS opt_right_parentheses opt_semicolon

    opt_left_parentheses  shift, and go to state 77


State 65

   45 INTERFACE_DECL: vip_interface identifier opt_left_brace PROTOTYPE_ASTERISK opt_right_brace .

    $default  reduce using rule 45 (INTERFACE_DECL)


State 66

   46 PROTOTYPE_ASTERISK: PROTOTYPE PROTOTYPE_ASTERISK .

    $default  reduce using rule 46 (PROTOTYPE_ASTERISK)


State 67

   11 VAR_DECL: identifier $@1 identifier $@2 opt_semicolon .

    $default  reduce using rule 11 (VAR_DECL)


State 68

   24 FUNCTION_DECL: TYPE identifier $@4 opt_left_parentheses $@5 . FORMALS opt_right_parentheses STMT_BLOCK

    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6
    vip_const   shift, and go to state 9

    $default  reduce using rule 29 (FORMALS)

    VARIABLE       go to state 69
    VARIABLE_PLUS  go to state 70
    TYPE           go to state 28
    FORMALS        go to state 78


State 69

   15 VARIABLE_PLUS: VARIABLE . opt_coma $@3 VARIABLE_PLUS
   16              | VARIABLE .

    opt_coma  shift, and go to state 79

    $default  reduce using rule 16 (VARIABLE_PLUS)


State 70

   28 FORMALS: VARIABLE_PLUS .

    $default  reduce using rule 28 (FORMALS)


State 71

   27 FUNCTION_DECL: vip_void identifier $@6 opt_left_parentheses $@7 FORMALS . opt_right_parentheses STMT_BLOCK

    opt_right_parentheses  shift, and go to state 80


State 72

   38 IDENTIFIER_PLUS: identifier . opt_coma IDENTIFIER_PLUS
   39                | identifier .

    opt_coma  shift, and go to state 81

    $default  reduce using rule 39 (IDENTIFIER_PLUS)


State 73

   35 IMPLEMENTS: vip_implements IDENTIFIER_PLUS .

    $default  reduce using rule 35 (IMPLEMENTS)


State 74

   40 IDENTIFIER_PLUS: ERR .

    $default  reduce using rule 40 (IDENTIFIER_PLUS)


State 75

   31 CLASS_DECL: vip_class identifier $@8 EXTENDS IMPLEMENTS opt_left_brace . FIELD_ASTERISK opt_right_brace

    error       shift, and go to state 1
    vip_void    shift, and go to state 2
    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6
    vip_const   shift, and go to state 9
    identifier  shift, and go to state 10

    opt_right_brace  reduce using rule 42 (FIELD_ASTERISK)

    VAR_DECL        go to state 82
    VARIABLE        go to state 14
    TYPE            go to state 15
    FUNCTION_DECL   go to state 83
    FIELD_ASTERISK  go to state 84
    FIELD           go to state 85
    ERR             go to state 19


State 76

   50 PROTOTYPE: vip_void identifier opt_left_parentheses . FORMALS opt_right_parentheses opt_semicolon

    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6
    vip_const   shift, and go to state 9

    $default  reduce using rule 29 (FORMALS)

    VARIABLE       go to state 69
    VARIABLE_PLUS  go to state 70
    TYPE           go to state 28
    FORMALS        go to state 86


State 77

   49 PROTOTYPE: TYPE identifier opt_left_parentheses . FORMALS opt_right_parentheses opt_semicolon

    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6
    vip_const   shift, and go to state 9

    $default  reduce using rule 29 (FORMALS)

    VARIABLE       go to state 69
    VARIABLE_PLUS  go to state 70
    TYPE           go to state 28
    FORMALS        go to state 87


State 78

   24 FUNCTION_DECL: TYPE identifier $@4 opt_left_parentheses $@5 FORMALS . opt_right_parentheses STMT_BLOCK

    opt_right_parentheses  shift, and go to state 88


State 79

   15 VARIABLE_PLUS: VARIABLE opt_coma . $@3 VARIABLE_PLUS

    $default  reduce using rule 14 ($@3)

    $@3  go to state 89


State 80

   27 FUNCTION_DECL: vip_void identifier $@6 opt_left_parentheses $@7 FORMALS opt_right_parentheses . STMT_BLOCK

    opt_left_brace  shift, and go to state 90

    STMT_BLOCK  go to state 91


State 81

   38 IDENTIFIER_PLUS: identifier opt_coma . IDENTIFIER_PLUS

    error       shift, and go to state 1
    identifier  shift, and go to state 72

    IDENTIFIER_PLUS  go to state 92
    ERR              go to state 74


State 82

   43 FIELD: VAR_DECL .

    $default  reduce using rule 43 (FIELD)


State 83

   44 FIELD: FUNCTION_DECL .

    $default  reduce using rule 44 (FIELD)


State 84

   31 CLASS_DECL: vip_class identifier $@8 EXTENDS IMPLEMENTS opt_left_brace FIELD_ASTERISK . opt_right_brace

    opt_right_brace  shift, and go to state 93


State 85

   41 FIELD_ASTERISK: FIELD . FIELD_ASTERISK

    error       shift, and go to state 1
    vip_void    shift, and go to state 2
    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6
    vip_const   shift, and go to state 9
    identifier  shift, and go to state 10

    opt_right_brace  reduce using rule 42 (FIELD_ASTERISK)

    VAR_DECL        go to state 82
    VARIABLE        go to state 14
    TYPE            go to state 15
    FUNCTION_DECL   go to state 83
    FIELD_ASTERISK  go to state 94
    FIELD           go to state 85
    ERR             go to state 19


State 86

   50 PROTOTYPE: vip_void identifier opt_left_parentheses FORMALS . opt_right_parentheses opt_semicolon

    opt_right_parentheses  shift, and go to state 95


State 87

   49 PROTOTYPE: TYPE identifier opt_left_parentheses FORMALS . opt_right_parentheses opt_semicolon

    opt_right_parentheses  shift, and go to state 96


State 88

   24 FUNCTION_DECL: TYPE identifier $@4 opt_left_parentheses $@5 FORMALS opt_right_parentheses . STMT_BLOCK

    opt_left_brace  shift, and go to state 90

    STMT_BLOCK  go to state 97


State 89

   15 VARIABLE_PLUS: VARIABLE opt_coma $@3 . VARIABLE_PLUS

    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6
    vip_const   shift, and go to state 9

    VARIABLE       go to state 69
    VARIABLE_PLUS  go to state 98
    TYPE           go to state 28


State 90

   51 STMT_BLOCK: opt_left_brace . VARS STMTS opt_right_brace

    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6
    vip_const   shift, and go to state 9

    $default  reduce using rule 53 (VARS)

    VARIABLE  go to state 99
    TYPE      go to state 28
    VARS      go to state 100


State 91

   27 FUNCTION_DECL: vip_void identifier $@6 opt_left_parentheses $@7 FORMALS opt_right_parentheses STMT_BLOCK .

    $default  reduce using rule 27 (FUNCTION_DECL)


State 92

   38 IDENTIFIER_PLUS: identifier opt_coma IDENTIFIER_PLUS .

    $default  reduce using rule 38 (IDENTIFIER_PLUS)


State 93

   31 CLASS_DECL: vip_class identifier $@8 EXTENDS IMPLEMENTS opt_left_brace FIELD_ASTERISK opt_right_brace .

    $default  reduce using rule 31 (CLASS_DECL)


State 94

   41 FIELD_ASTERISK: FIELD FIELD_ASTERISK .

    $default  reduce using rule 41 (FIELD_ASTERISK)


State 95

   50 PROTOTYPE: vip_void identifier opt_left_parentheses FORMALS opt_right_parentheses . opt_semicolon

    opt_semicolon  shift, and go to state 101


State 96

   49 PROTOTYPE: TYPE identifier opt_left_parentheses FORMALS opt_right_parentheses . opt_semicolon

    opt_semicolon  shift, and go to state 102


State 97

   24 FUNCTION_DECL: TYPE identifier $@4 opt_left_parentheses $@5 FORMALS opt_right_parentheses STMT_BLOCK .

    $default  reduce using rule 24 (FUNCTION_DECL)


State 98

   15 VARIABLE_PLUS: VARIABLE opt_coma $@3 VARIABLE_PLUS .

    $default  reduce using rule 15 (VARIABLE_PLUS)


State 99

   52 VARS: VARIABLE . opt_semicolon VARS

    opt_semicolon  shift, and go to state 103


State 100

   51 STMT_BLOCK: opt_left_brace VARS . STMTS opt_right_brace

    error                 shift, and go to state 1
    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_for               shift, and go to state 106
    vip_while             shift, and go to state 107
    vip_if                shift, and go to state 108
    vip_return            shift, and go to state 109
    vip_break             shift, and go to state 110
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_Print             shift, and go to state 113
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_brace        shift, and go to state 90
    opt_left_parentheses  shift, and go to state 125

    opt_semicolon    reduce using rule 74 (EXPRESSION_Q)
    opt_right_brace  reduce using rule 55 (STMTS)

    STMT_BLOCK    go to state 126
    STMTS         go to state 127
    STATEMENT     go to state 128
    IF_STMT       go to state 129
    WHILE_STMT    go to state 130
    FOR_STMT      go to state 131
    RETURN_STMT   go to state 132
    BREAK_STMT    go to state 133
    PRINT_STMT    go to state 134
    EXPRESSION_Q  go to state 135
    EXPRESSION    go to state 136
    VALUE         go to state 137
    CALL          go to state 138
    CONST         go to state 139
    ERR           go to state 140


State 101

   50 PROTOTYPE: vip_void identifier opt_left_parentheses FORMALS opt_right_parentheses opt_semicolon .

    $default  reduce using rule 50 (PROTOTYPE)


State 102

   49 PROTOTYPE: TYPE identifier opt_left_parentheses FORMALS opt_right_parentheses opt_semicolon .

    $default  reduce using rule 49 (PROTOTYPE)


State 103

   52 VARS: VARIABLE opt_semicolon . VARS

    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6
    vip_const   shift, and go to state 9

    $default  reduce using rule 53 (VARS)

    VARIABLE  go to state 99
    TYPE      go to state 28
    VARS      go to state 141


State 104

  119 CONST: vip_null .

    $default  reduce using rule 119 (CONST)


State 105

   80 EXPRESSION: vip_this .

    $default  reduce using rule 80 (EXPRESSION)


State 106

   69 FOR_STMT: vip_for . opt_left_parentheses EXPRESSION_Q opt_semicolon EXPRESSION opt_semicolon EXPRESSION_Q opt_right_parentheses STATEMENT

    opt_left_parentheses  shift, and go to state 142


State 107

   68 WHILE_STMT: vip_while . opt_left_parentheses EXPRESSION opt_right_parentheses STATEMENT

    opt_left_parentheses  shift, and go to state 143


State 108

   65 IF_STMT: vip_if . opt_left_parentheses EXPRESSION opt_right_parentheses STATEMENT ELSE_STMT

    opt_left_parentheses  shift, and go to state 144


State 109

   70 RETURN_STMT: vip_return . EXPRESSION_Q opt_semicolon

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    $default  reduce using rule 74 (EXPRESSION_Q)

    EXPRESSION_Q  go to state 145
    EXPRESSION    go to state 136
    VALUE         go to state 137
    CALL          go to state 138
    CONST         go to state 139


State 110

   71 BREAK_STMT: vip_break . opt_semicolon

    opt_semicolon  shift, and go to state 146


State 111

   98 EXPRESSION: vip_New . opt_left_parentheses identifier opt_right_parentheses

    opt_left_parentheses  shift, and go to state 147


State 112

   99 EXPRESSION: vip_NewArray . opt_left_parentheses EXPRESSION opt_coma TYPE opt_right_parentheses

    opt_left_parentheses  shift, and go to state 148


State 113

   72 PRINT_STMT: vip_Print . opt_left_parentheses EXPRESSION_PLUS opt_right_parentheses opt_semicolon

    opt_left_parentheses  shift, and go to state 149


State 114

  100 EXPRESSION: vip_ReadInteger . opt_left_parentheses opt_right_parentheses

    opt_left_parentheses  shift, and go to state 150


State 115

  101 EXPRESSION: vip_ReadLine . opt_left_parentheses opt_right_parentheses

    opt_left_parentheses  shift, and go to state 151


State 116

  102 EXPRESSION: vip_Malloc . opt_left_parentheses EXPRESSION opt_right_parentheses

    opt_left_parentheses  shift, and go to state 152


State 117

  103 VALUE: identifier .
  107 CALL: identifier . opt_left_parentheses ACTUAL opt_right_parentheses

    opt_left_parentheses  shift, and go to state 153

    $default  reduce using rule 103 (VALUE)


State 118

  114 CONST: num_int .

    $default  reduce using rule 114 (CONST)


State 119

  115 CONST: num_hex .

    $default  reduce using rule 115 (CONST)


State 120

  116 CONST: num_double .

    $default  reduce using rule 116 (CONST)


State 121

  118 CONST: val_string .

    $default  reduce using rule 118 (CONST)


State 122

  117 CONST: val_bool .

    $default  reduce using rule 117 (CONST)


State 123

   88 EXPRESSION: opt_minus . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 154
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 124

   97 EXPRESSION: opt_not . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 155
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 125

   82 EXPRESSION: opt_left_parentheses . EXPRESSION opt_right_parentheses

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 156
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 126

   63 STATEMENT: STMT_BLOCK .

    $default  reduce using rule 63 (STATEMENT)


State 127

   51 STMT_BLOCK: opt_left_brace VARS STMTS . opt_right_brace

    opt_right_brace  shift, and go to state 157


State 128

   54 STMTS: STATEMENT . STMTS

    error                 shift, and go to state 1
    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_for               shift, and go to state 106
    vip_while             shift, and go to state 107
    vip_if                shift, and go to state 108
    vip_return            shift, and go to state 109
    vip_break             shift, and go to state 110
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_Print             shift, and go to state 113
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_brace        shift, and go to state 90
    opt_left_parentheses  shift, and go to state 125

    opt_semicolon    reduce using rule 74 (EXPRESSION_Q)
    opt_right_brace  reduce using rule 55 (STMTS)

    STMT_BLOCK    go to state 126
    STMTS         go to state 158
    STATEMENT     go to state 128
    IF_STMT       go to state 129
    WHILE_STMT    go to state 130
    FOR_STMT      go to state 131
    RETURN_STMT   go to state 132
    BREAK_STMT    go to state 133
    PRINT_STMT    go to state 134
    EXPRESSION_Q  go to state 135
    EXPRESSION    go to state 136
    VALUE         go to state 137
    CALL          go to state 138
    CONST         go to state 139
    ERR           go to state 140


State 129

   57 STATEMENT: IF_STMT .

    $default  reduce using rule 57 (STATEMENT)


State 130

   58 STATEMENT: WHILE_STMT .

    $default  reduce using rule 58 (STATEMENT)


State 131

   59 STATEMENT: FOR_STMT .

    $default  reduce using rule 59 (STATEMENT)


State 132

   61 STATEMENT: RETURN_STMT .

    $default  reduce using rule 61 (STATEMENT)


State 133

   60 STATEMENT: BREAK_STMT .

    $default  reduce using rule 60 (STATEMENT)


State 134

   62 STATEMENT: PRINT_STMT .

    $default  reduce using rule 62 (STATEMENT)


State 135

   56 STATEMENT: EXPRESSION_Q . opt_semicolon

    opt_semicolon  shift, and go to state 159


State 136

   73 EXPRESSION_Q: EXPRESSION .
   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_equal          shift, and go to state 169
    opt_not_equal      shift, and go to state 170
    opt_and            shift, and go to state 171
    opt_or             shift, and go to state 172
    opt_dot            shift, and go to state 173
    opt_left_bracket   shift, and go to state 174

    $default  reduce using rule 73 (EXPRESSION_Q)

    VALUE_P  go to state 175


State 137

   77 EXPRESSION: VALUE . opt_assign EXPRESSION
   79           | VALUE .

    opt_assign  shift, and go to state 176

    $default  reduce using rule 79 (EXPRESSION)


State 138

   81 EXPRESSION: CALL .

    $default  reduce using rule 81 (EXPRESSION)


State 139

   78 EXPRESSION: CONST .

    $default  reduce using rule 78 (EXPRESSION)


State 140

   64 STATEMENT: ERR .

    $default  reduce using rule 64 (STATEMENT)


State 141

   52 VARS: VARIABLE opt_semicolon VARS .

    $default  reduce using rule 52 (VARS)


State 142

   69 FOR_STMT: vip_for opt_left_parentheses . EXPRESSION_Q opt_semicolon EXPRESSION opt_semicolon EXPRESSION_Q opt_right_parentheses STATEMENT

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    $default  reduce using rule 74 (EXPRESSION_Q)

    EXPRESSION_Q  go to state 177
    EXPRESSION    go to state 136
    VALUE         go to state 137
    CALL          go to state 138
    CONST         go to state 139


State 143

   68 WHILE_STMT: vip_while opt_left_parentheses . EXPRESSION opt_right_parentheses STATEMENT

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 178
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 144

   65 IF_STMT: vip_if opt_left_parentheses . EXPRESSION opt_right_parentheses STATEMENT ELSE_STMT

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 179
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 145

   70 RETURN_STMT: vip_return EXPRESSION_Q . opt_semicolon

    opt_semicolon  shift, and go to state 180


State 146

   71 BREAK_STMT: vip_break opt_semicolon .

    $default  reduce using rule 71 (BREAK_STMT)


State 147

   98 EXPRESSION: vip_New opt_left_parentheses . identifier opt_right_parentheses

    identifier  shift, and go to state 181


State 148

   99 EXPRESSION: vip_NewArray opt_left_parentheses . EXPRESSION opt_coma TYPE opt_right_parentheses

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 182
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 149

   72 PRINT_STMT: vip_Print opt_left_parentheses . EXPRESSION_PLUS opt_right_parentheses opt_semicolon

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION_PLUS  go to state 183
    EXPRESSION       go to state 184
    VALUE            go to state 137
    CALL             go to state 138
    CONST            go to state 139


State 150

  100 EXPRESSION: vip_ReadInteger opt_left_parentheses . opt_right_parentheses

    opt_right_parentheses  shift, and go to state 185


State 151

  101 EXPRESSION: vip_ReadLine opt_left_parentheses . opt_right_parentheses

    opt_right_parentheses  shift, and go to state 186


State 152

  102 EXPRESSION: vip_Malloc opt_left_parentheses . EXPRESSION opt_right_parentheses

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 187
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 153

  107 CALL: identifier opt_left_parentheses . ACTUAL opt_right_parentheses

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    $default  reduce using rule 113 (ACTUAL)

    EXPRESSION_PLUS  go to state 188
    EXPRESSION       go to state 184
    VALUE            go to state 137
    CALL             go to state 138
    ACTUAL           go to state 189
    CONST            go to state 139


State 154

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   88           | opt_minus EXPRESSION .
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_times         shift, and go to state 162
    opt_divide        shift, and go to state 163
    opt_mod           shift, and go to state 164
    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 88 (EXPRESSION)

    VALUE_P  go to state 175


State 155

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
   97           | opt_not EXPRESSION .
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 97 (EXPRESSION)

    VALUE_P  go to state 175


State 156

   82 EXPRESSION: opt_left_parentheses EXPRESSION . opt_right_parentheses
   83           | EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus               shift, and go to state 160
    opt_minus              shift, and go to state 161
    opt_times              shift, and go to state 162
    opt_divide             shift, and go to state 163
    opt_mod                shift, and go to state 164
    opt_lower              shift, and go to state 165
    opt_lower_equal        shift, and go to state 166
    opt_greater            shift, and go to state 167
    opt_greater_equal      shift, and go to state 168
    opt_equal              shift, and go to state 169
    opt_not_equal          shift, and go to state 170
    opt_and                shift, and go to state 171
    opt_or                 shift, and go to state 172
    opt_dot                shift, and go to state 173
    opt_left_bracket       shift, and go to state 174
    opt_right_parentheses  shift, and go to state 190

    VALUE_P  go to state 175


State 157

   51 STMT_BLOCK: opt_left_brace VARS STMTS opt_right_brace .

    $default  reduce using rule 51 (STMT_BLOCK)


State 158

   54 STMTS: STATEMENT STMTS .

    $default  reduce using rule 54 (STMTS)


State 159

   56 STATEMENT: EXPRESSION_Q opt_semicolon .

    $default  reduce using rule 56 (STATEMENT)


State 160

   83 EXPRESSION: EXPRESSION opt_plus . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 191
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 161

   84 EXPRESSION: EXPRESSION opt_minus . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 192
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 162

   86 EXPRESSION: EXPRESSION opt_times . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 193
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 163

   85 EXPRESSION: EXPRESSION opt_divide . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 194
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 164

   87 EXPRESSION: EXPRESSION opt_mod . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 195
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 165

   89 EXPRESSION: EXPRESSION opt_lower . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 196
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 166

   90 EXPRESSION: EXPRESSION opt_lower_equal . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 197
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 167

   91 EXPRESSION: EXPRESSION opt_greater . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 198
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 168

   92 EXPRESSION: EXPRESSION opt_greater_equal . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 199
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 169

   93 EXPRESSION: EXPRESSION opt_equal . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 200
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 170

   94 EXPRESSION: EXPRESSION opt_not_equal . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 201
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 171

   95 EXPRESSION: EXPRESSION opt_and . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 202
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 172

   96 EXPRESSION: EXPRESSION opt_or . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 203
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 173

  105 VALUE_P: opt_dot . identifier
  108 CALL: EXPRESSION opt_dot . identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION opt_dot . LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    vip_GetByte  shift, and go to state 204
    vip_SetByte  shift, and go to state 205
    identifier   shift, and go to state 206

    LIB_CALL  go to state 207


State 174

  106 VALUE_P: opt_left_bracket . EXPRESSION opt_right_bracket

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 208
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 175

  104 VALUE: EXPRESSION VALUE_P .

    $default  reduce using rule 104 (VALUE)


State 176

   77 EXPRESSION: VALUE opt_assign . EXPRESSION

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 209
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 177

   69 FOR_STMT: vip_for opt_left_parentheses EXPRESSION_Q . opt_semicolon EXPRESSION opt_semicolon EXPRESSION_Q opt_right_parentheses STATEMENT

    opt_semicolon  shift, and go to state 210


State 178

   68 WHILE_STMT: vip_while opt_left_parentheses EXPRESSION . opt_right_parentheses STATEMENT
   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus               shift, and go to state 160
    opt_minus              shift, and go to state 161
    opt_times              shift, and go to state 162
    opt_divide             shift, and go to state 163
    opt_mod                shift, and go to state 164
    opt_lower              shift, and go to state 165
    opt_lower_equal        shift, and go to state 166
    opt_greater            shift, and go to state 167
    opt_greater_equal      shift, and go to state 168
    opt_equal              shift, and go to state 169
    opt_not_equal          shift, and go to state 170
    opt_and                shift, and go to state 171
    opt_or                 shift, and go to state 172
    opt_dot                shift, and go to state 173
    opt_left_bracket       shift, and go to state 174
    opt_right_parentheses  shift, and go to state 211

    VALUE_P  go to state 175


State 179

   65 IF_STMT: vip_if opt_left_parentheses EXPRESSION . opt_right_parentheses STATEMENT ELSE_STMT
   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus               shift, and go to state 160
    opt_minus              shift, and go to state 161
    opt_times              shift, and go to state 162
    opt_divide             shift, and go to state 163
    opt_mod                shift, and go to state 164
    opt_lower              shift, and go to state 165
    opt_lower_equal        shift, and go to state 166
    opt_greater            shift, and go to state 167
    opt_greater_equal      shift, and go to state 168
    opt_equal              shift, and go to state 169
    opt_not_equal          shift, and go to state 170
    opt_and                shift, and go to state 171
    opt_or                 shift, and go to state 172
    opt_dot                shift, and go to state 173
    opt_left_bracket       shift, and go to state 174
    opt_right_parentheses  shift, and go to state 212

    VALUE_P  go to state 175


State 180

   70 RETURN_STMT: vip_return EXPRESSION_Q opt_semicolon .

    $default  reduce using rule 70 (RETURN_STMT)


State 181

   98 EXPRESSION: vip_New opt_left_parentheses identifier . opt_right_parentheses

    opt_right_parentheses  shift, and go to state 213


State 182

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
   99           | vip_NewArray opt_left_parentheses EXPRESSION . opt_coma TYPE opt_right_parentheses
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_equal          shift, and go to state 169
    opt_not_equal      shift, and go to state 170
    opt_and            shift, and go to state 171
    opt_or             shift, and go to state 172
    opt_dot            shift, and go to state 173
    opt_coma           shift, and go to state 214
    opt_left_bracket   shift, and go to state 174

    VALUE_P  go to state 175


State 183

   72 PRINT_STMT: vip_Print opt_left_parentheses EXPRESSION_PLUS . opt_right_parentheses opt_semicolon

    opt_right_parentheses  shift, and go to state 215


State 184

   75 EXPRESSION_PLUS: EXPRESSION . opt_coma EXPRESSION_PLUS
   76                | EXPRESSION .
   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_equal          shift, and go to state 169
    opt_not_equal      shift, and go to state 170
    opt_and            shift, and go to state 171
    opt_or             shift, and go to state 172
    opt_dot            shift, and go to state 173
    opt_coma           shift, and go to state 216
    opt_left_bracket   shift, and go to state 174

    $default  reduce using rule 76 (EXPRESSION_PLUS)

    VALUE_P  go to state 175


State 185

  100 EXPRESSION: vip_ReadInteger opt_left_parentheses opt_right_parentheses .

    $default  reduce using rule 100 (EXPRESSION)


State 186

  101 EXPRESSION: vip_ReadLine opt_left_parentheses opt_right_parentheses .

    $default  reduce using rule 101 (EXPRESSION)


State 187

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  102           | vip_Malloc opt_left_parentheses EXPRESSION . opt_right_parentheses
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus               shift, and go to state 160
    opt_minus              shift, and go to state 161
    opt_times              shift, and go to state 162
    opt_divide             shift, and go to state 163
    opt_mod                shift, and go to state 164
    opt_lower              shift, and go to state 165
    opt_lower_equal        shift, and go to state 166
    opt_greater            shift, and go to state 167
    opt_greater_equal      shift, and go to state 168
    opt_equal              shift, and go to state 169
    opt_not_equal          shift, and go to state 170
    opt_and                shift, and go to state 171
    opt_or                 shift, and go to state 172
    opt_dot                shift, and go to state 173
    opt_left_bracket       shift, and go to state 174
    opt_right_parentheses  shift, and go to state 217

    VALUE_P  go to state 175


State 188

  112 ACTUAL: EXPRESSION_PLUS .

    $default  reduce using rule 112 (ACTUAL)


State 189

  107 CALL: identifier opt_left_parentheses ACTUAL . opt_right_parentheses

    opt_right_parentheses  shift, and go to state 218


State 190

   82 EXPRESSION: opt_left_parentheses EXPRESSION opt_right_parentheses .

    $default  reduce using rule 82 (EXPRESSION)


State 191

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   83           | EXPRESSION opt_plus EXPRESSION .
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_times         shift, and go to state 162
    opt_divide        shift, and go to state 163
    opt_mod           shift, and go to state 164
    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 83 (EXPRESSION)

    VALUE_P  go to state 175


State 192

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   84           | EXPRESSION opt_minus EXPRESSION .
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_times         shift, and go to state 162
    opt_divide        shift, and go to state 163
    opt_mod           shift, and go to state 164
    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 84 (EXPRESSION)

    VALUE_P  go to state 175


State 193

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   86           | EXPRESSION opt_times EXPRESSION .
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 86 (EXPRESSION)

    VALUE_P  go to state 175


State 194

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   85           | EXPRESSION opt_divide EXPRESSION .
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 85 (EXPRESSION)

    VALUE_P  go to state 175


State 195

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   87           | EXPRESSION opt_mod EXPRESSION .
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 87 (EXPRESSION)

    VALUE_P  go to state 175


State 196

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   89           | EXPRESSION opt_lower EXPRESSION .
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus          shift, and go to state 160
    opt_minus         shift, and go to state 161
    opt_times         shift, and go to state 162
    opt_divide        shift, and go to state 163
    opt_mod           shift, and go to state 164
    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 89 (EXPRESSION)

    VALUE_P  go to state 175


State 197

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   90           | EXPRESSION opt_lower_equal EXPRESSION .
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus          shift, and go to state 160
    opt_minus         shift, and go to state 161
    opt_times         shift, and go to state 162
    opt_divide        shift, and go to state 163
    opt_mod           shift, and go to state 164
    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 90 (EXPRESSION)

    VALUE_P  go to state 175


State 198

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   91           | EXPRESSION opt_greater EXPRESSION .
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus          shift, and go to state 160
    opt_minus         shift, and go to state 161
    opt_times         shift, and go to state 162
    opt_divide        shift, and go to state 163
    opt_mod           shift, and go to state 164
    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 91 (EXPRESSION)

    VALUE_P  go to state 175


State 199

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   92           | EXPRESSION opt_greater_equal EXPRESSION .
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus          shift, and go to state 160
    opt_minus         shift, and go to state 161
    opt_times         shift, and go to state 162
    opt_divide        shift, and go to state 163
    opt_mod           shift, and go to state 164
    opt_dot           shift, and go to state 173
    opt_left_bracket  shift, and go to state 174

    $default  reduce using rule 92 (EXPRESSION)

    VALUE_P  go to state 175


State 200

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   93           | EXPRESSION opt_equal EXPRESSION .
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_dot            shift, and go to state 173
    opt_left_bracket   shift, and go to state 174

    opt_equal      error (nonassociative)
    opt_not_equal  error (nonassociative)

    $default  reduce using rule 93 (EXPRESSION)

    VALUE_P  go to state 175


State 201

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   94           | EXPRESSION opt_not_equal EXPRESSION .
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_dot            shift, and go to state 173
    opt_left_bracket   shift, and go to state 174

    opt_equal      error (nonassociative)
    opt_not_equal  error (nonassociative)

    $default  reduce using rule 94 (EXPRESSION)

    VALUE_P  go to state 175


State 202

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   95           | EXPRESSION opt_and EXPRESSION .
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_equal          shift, and go to state 169
    opt_not_equal      shift, and go to state 170
    opt_dot            shift, and go to state 173
    opt_left_bracket   shift, and go to state 174

    $default  reduce using rule 95 (EXPRESSION)

    VALUE_P  go to state 175


State 203

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
   96           | EXPRESSION opt_or EXPRESSION .
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_equal          shift, and go to state 169
    opt_not_equal      shift, and go to state 170
    opt_and            shift, and go to state 171
    opt_dot            shift, and go to state 173
    opt_left_bracket   shift, and go to state 174

    $default  reduce using rule 96 (EXPRESSION)

    VALUE_P  go to state 175


State 204

  110 LIB_CALL: vip_GetByte . opt_left_parentheses EXPRESSION opt_right_parentheses

    opt_left_parentheses  shift, and go to state 219


State 205

  111 LIB_CALL: vip_SetByte . opt_left_parentheses EXPRESSION opt_coma EXPRESSION opt_right_parentheses

    opt_left_parentheses  shift, and go to state 220


State 206

  105 VALUE_P: opt_dot identifier .
  108 CALL: EXPRESSION opt_dot identifier . opt_left_parentheses ACTUAL opt_right_parentheses

    opt_left_parentheses  shift, and go to state 221

    $default  reduce using rule 105 (VALUE_P)


State 207

  109 CALL: EXPRESSION opt_dot LIB_CALL . opt_left_parentheses ACTUAL opt_right_parentheses

    opt_left_parentheses  shift, and go to state 222


State 208

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  106 VALUE_P: opt_left_bracket EXPRESSION . opt_right_bracket
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_equal          shift, and go to state 169
    opt_not_equal      shift, and go to state 170
    opt_and            shift, and go to state 171
    opt_or             shift, and go to state 172
    opt_dot            shift, and go to state 173
    opt_left_bracket   shift, and go to state 174
    opt_right_bracket  shift, and go to state 223

    VALUE_P  go to state 175


State 209

   77 EXPRESSION: VALUE opt_assign EXPRESSION .
   83           | EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_equal          shift, and go to state 169
    opt_not_equal      shift, and go to state 170
    opt_and            shift, and go to state 171
    opt_or             shift, and go to state 172
    opt_dot            shift, and go to state 173
    opt_left_bracket   shift, and go to state 174

    $default  reduce using rule 77 (EXPRESSION)

    VALUE_P  go to state 175


State 210

   69 FOR_STMT: vip_for opt_left_parentheses EXPRESSION_Q opt_semicolon . EXPRESSION opt_semicolon EXPRESSION_Q opt_right_parentheses STATEMENT

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 224
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 211

   68 WHILE_STMT: vip_while opt_left_parentheses EXPRESSION opt_right_parentheses . STATEMENT

    error                 shift, and go to state 1
    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_for               shift, and go to state 106
    vip_while             shift, and go to state 107
    vip_if                shift, and go to state 108
    vip_return            shift, and go to state 109
    vip_break             shift, and go to state 110
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_Print             shift, and go to state 113
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_brace        shift, and go to state 90
    opt_left_parentheses  shift, and go to state 125

    opt_semicolon  reduce using rule 74 (EXPRESSION_Q)

    STMT_BLOCK    go to state 126
    STATEMENT     go to state 225
    IF_STMT       go to state 129
    WHILE_STMT    go to state 130
    FOR_STMT      go to state 131
    RETURN_STMT   go to state 132
    BREAK_STMT    go to state 133
    PRINT_STMT    go to state 134
    EXPRESSION_Q  go to state 135
    EXPRESSION    go to state 136
    VALUE         go to state 137
    CALL          go to state 138
    CONST         go to state 139
    ERR           go to state 140


State 212

   65 IF_STMT: vip_if opt_left_parentheses EXPRESSION opt_right_parentheses . STATEMENT ELSE_STMT

    error                 shift, and go to state 1
    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_for               shift, and go to state 106
    vip_while             shift, and go to state 107
    vip_if                shift, and go to state 108
    vip_return            shift, and go to state 109
    vip_break             shift, and go to state 110
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_Print             shift, and go to state 113
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_brace        shift, and go to state 90
    opt_left_parentheses  shift, and go to state 125

    opt_semicolon  reduce using rule 74 (EXPRESSION_Q)

    STMT_BLOCK    go to state 126
    STATEMENT     go to state 226
    IF_STMT       go to state 129
    WHILE_STMT    go to state 130
    FOR_STMT      go to state 131
    RETURN_STMT   go to state 132
    BREAK_STMT    go to state 133
    PRINT_STMT    go to state 134
    EXPRESSION_Q  go to state 135
    EXPRESSION    go to state 136
    VALUE         go to state 137
    CALL          go to state 138
    CONST         go to state 139
    ERR           go to state 140


State 213

   98 EXPRESSION: vip_New opt_left_parentheses identifier opt_right_parentheses .

    $default  reduce using rule 98 (EXPRESSION)


State 214

   99 EXPRESSION: vip_NewArray opt_left_parentheses EXPRESSION opt_coma . TYPE opt_right_parentheses

    vip_int     shift, and go to state 3
    vip_double  shift, and go to state 4
    vip_bool    shift, and go to state 5
    vip_string  shift, and go to state 6

    TYPE  go to state 227


State 215

   72 PRINT_STMT: vip_Print opt_left_parentheses EXPRESSION_PLUS opt_right_parentheses . opt_semicolon

    opt_semicolon  shift, and go to state 228


State 216

   75 EXPRESSION_PLUS: EXPRESSION opt_coma . EXPRESSION_PLUS

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION_PLUS  go to state 229
    EXPRESSION       go to state 184
    VALUE            go to state 137
    CALL             go to state 138
    CONST            go to state 139


State 217

  102 EXPRESSION: vip_Malloc opt_left_parentheses EXPRESSION opt_right_parentheses .

    $default  reduce using rule 102 (EXPRESSION)


State 218

  107 CALL: identifier opt_left_parentheses ACTUAL opt_right_parentheses .

    $default  reduce using rule 107 (CALL)


State 219

  110 LIB_CALL: vip_GetByte opt_left_parentheses . EXPRESSION opt_right_parentheses

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 230
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 220

  111 LIB_CALL: vip_SetByte opt_left_parentheses . EXPRESSION opt_coma EXPRESSION opt_right_parentheses

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 231
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 221

  108 CALL: EXPRESSION opt_dot identifier opt_left_parentheses . ACTUAL opt_right_parentheses

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    $default  reduce using rule 113 (ACTUAL)

    EXPRESSION_PLUS  go to state 188
    EXPRESSION       go to state 184
    VALUE            go to state 137
    CALL             go to state 138
    ACTUAL           go to state 232
    CONST            go to state 139


State 222

  109 CALL: EXPRESSION opt_dot LIB_CALL opt_left_parentheses . ACTUAL opt_right_parentheses

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    $default  reduce using rule 113 (ACTUAL)

    EXPRESSION_PLUS  go to state 188
    EXPRESSION       go to state 184
    VALUE            go to state 137
    CALL             go to state 138
    ACTUAL           go to state 233
    CONST            go to state 139


State 223

  106 VALUE_P: opt_left_bracket EXPRESSION opt_right_bracket .

    $default  reduce using rule 106 (VALUE_P)


State 224

   69 FOR_STMT: vip_for opt_left_parentheses EXPRESSION_Q opt_semicolon EXPRESSION . opt_semicolon EXPRESSION_Q opt_right_parentheses STATEMENT
   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_equal          shift, and go to state 169
    opt_not_equal      shift, and go to state 170
    opt_and            shift, and go to state 171
    opt_or             shift, and go to state 172
    opt_semicolon      shift, and go to state 234
    opt_dot            shift, and go to state 173
    opt_left_bracket   shift, and go to state 174

    VALUE_P  go to state 175


State 225

   68 WHILE_STMT: vip_while opt_left_parentheses EXPRESSION opt_right_parentheses STATEMENT .

    $default  reduce using rule 68 (WHILE_STMT)


State 226

   65 IF_STMT: vip_if opt_left_parentheses EXPRESSION opt_right_parentheses STATEMENT . ELSE_STMT

    vip_else  shift, and go to state 235

    vip_else  [reduce using rule 67 (ELSE_STMT)]
    $default  reduce using rule 67 (ELSE_STMT)

    ELSE_STMT  go to state 236


State 227

   21 TYPE: TYPE . opt_left_bracket opt_right_bracket
   99 EXPRESSION: vip_NewArray opt_left_parentheses EXPRESSION opt_coma TYPE . opt_right_parentheses

    opt_left_bracket       shift, and go to state 38
    opt_right_parentheses  shift, and go to state 237


State 228

   72 PRINT_STMT: vip_Print opt_left_parentheses EXPRESSION_PLUS opt_right_parentheses opt_semicolon .

    $default  reduce using rule 72 (PRINT_STMT)


State 229

   75 EXPRESSION_PLUS: EXPRESSION opt_coma EXPRESSION_PLUS .

    $default  reduce using rule 75 (EXPRESSION_PLUS)


State 230

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses
  110 LIB_CALL: vip_GetByte opt_left_parentheses EXPRESSION . opt_right_parentheses

    opt_plus               shift, and go to state 160
    opt_minus              shift, and go to state 161
    opt_times              shift, and go to state 162
    opt_divide             shift, and go to state 163
    opt_mod                shift, and go to state 164
    opt_lower              shift, and go to state 165
    opt_lower_equal        shift, and go to state 166
    opt_greater            shift, and go to state 167
    opt_greater_equal      shift, and go to state 168
    opt_equal              shift, and go to state 169
    opt_not_equal          shift, and go to state 170
    opt_and                shift, and go to state 171
    opt_or                 shift, and go to state 172
    opt_dot                shift, and go to state 173
    opt_left_bracket       shift, and go to state 174
    opt_right_parentheses  shift, and go to state 238

    VALUE_P  go to state 175


State 231

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses
  111 LIB_CALL: vip_SetByte opt_left_parentheses EXPRESSION . opt_coma EXPRESSION opt_right_parentheses

    opt_plus           shift, and go to state 160
    opt_minus          shift, and go to state 161
    opt_times          shift, and go to state 162
    opt_divide         shift, and go to state 163
    opt_mod            shift, and go to state 164
    opt_lower          shift, and go to state 165
    opt_lower_equal    shift, and go to state 166
    opt_greater        shift, and go to state 167
    opt_greater_equal  shift, and go to state 168
    opt_equal          shift, and go to state 169
    opt_not_equal      shift, and go to state 170
    opt_and            shift, and go to state 171
    opt_or             shift, and go to state 172
    opt_dot            shift, and go to state 173
    opt_coma           shift, and go to state 239
    opt_left_bracket   shift, and go to state 174

    VALUE_P  go to state 175


State 232

  108 CALL: EXPRESSION opt_dot identifier opt_left_parentheses ACTUAL . opt_right_parentheses

    opt_right_parentheses  shift, and go to state 240


State 233

  109 CALL: EXPRESSION opt_dot LIB_CALL opt_left_parentheses ACTUAL . opt_right_parentheses

    opt_right_parentheses  shift, and go to state 241


State 234

   69 FOR_STMT: vip_for opt_left_parentheses EXPRESSION_Q opt_semicolon EXPRESSION opt_semicolon . EXPRESSION_Q opt_right_parentheses STATEMENT

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    $default  reduce using rule 74 (EXPRESSION_Q)

    EXPRESSION_Q  go to state 242
    EXPRESSION    go to state 136
    VALUE         go to state 137
    CALL          go to state 138
    CONST         go to state 139


State 235

   66 ELSE_STMT: vip_else . STATEMENT

    error                 shift, and go to state 1
    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_for               shift, and go to state 106
    vip_while             shift, and go to state 107
    vip_if                shift, and go to state 108
    vip_return            shift, and go to state 109
    vip_break             shift, and go to state 110
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_Print             shift, and go to state 113
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_brace        shift, and go to state 90
    opt_left_parentheses  shift, and go to state 125

    opt_semicolon  reduce using rule 74 (EXPRESSION_Q)

    STMT_BLOCK    go to state 126
    STATEMENT     go to state 243
    IF_STMT       go to state 129
    WHILE_STMT    go to state 130
    FOR_STMT      go to state 131
    RETURN_STMT   go to state 132
    BREAK_STMT    go to state 133
    PRINT_STMT    go to state 134
    EXPRESSION_Q  go to state 135
    EXPRESSION    go to state 136
    VALUE         go to state 137
    CALL          go to state 138
    CONST         go to state 139
    ERR           go to state 140


State 236

   65 IF_STMT: vip_if opt_left_parentheses EXPRESSION opt_right_parentheses STATEMENT ELSE_STMT .

    $default  reduce using rule 65 (IF_STMT)


State 237

   99 EXPRESSION: vip_NewArray opt_left_parentheses EXPRESSION opt_coma TYPE opt_right_parentheses .

    $default  reduce using rule 99 (EXPRESSION)


State 238

  110 LIB_CALL: vip_GetByte opt_left_parentheses EXPRESSION opt_right_parentheses .

    $default  reduce using rule 110 (LIB_CALL)


State 239

  111 LIB_CALL: vip_SetByte opt_left_parentheses EXPRESSION opt_coma . EXPRESSION opt_right_parentheses

    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_parentheses  shift, and go to state 125

    EXPRESSION  go to state 244
    VALUE       go to state 137
    CALL        go to state 138
    CONST       go to state 139


State 240

  108 CALL: EXPRESSION opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses .

    $default  reduce using rule 108 (CALL)


State 241

  109 CALL: EXPRESSION opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses .

    $default  reduce using rule 109 (CALL)


State 242

   69 FOR_STMT: vip_for opt_left_parentheses EXPRESSION_Q opt_semicolon EXPRESSION opt_semicolon EXPRESSION_Q . opt_right_parentheses STATEMENT

    opt_right_parentheses  shift, and go to state 245


State 243

   66 ELSE_STMT: vip_else STATEMENT .

    $default  reduce using rule 66 (ELSE_STMT)


State 244

   83 EXPRESSION: EXPRESSION . opt_plus EXPRESSION
   84           | EXPRESSION . opt_minus EXPRESSION
   85           | EXPRESSION . opt_divide EXPRESSION
   86           | EXPRESSION . opt_times EXPRESSION
   87           | EXPRESSION . opt_mod EXPRESSION
   89           | EXPRESSION . opt_lower EXPRESSION
   90           | EXPRESSION . opt_lower_equal EXPRESSION
   91           | EXPRESSION . opt_greater EXPRESSION
   92           | EXPRESSION . opt_greater_equal EXPRESSION
   93           | EXPRESSION . opt_equal EXPRESSION
   94           | EXPRESSION . opt_not_equal EXPRESSION
   95           | EXPRESSION . opt_and EXPRESSION
   96           | EXPRESSION . opt_or EXPRESSION
  104 VALUE: EXPRESSION . VALUE_P
  108 CALL: EXPRESSION . opt_dot identifier opt_left_parentheses ACTUAL opt_right_parentheses
  109     | EXPRESSION . opt_dot LIB_CALL opt_left_parentheses ACTUAL opt_right_parentheses
  111 LIB_CALL: vip_SetByte opt_left_parentheses EXPRESSION opt_coma EXPRESSION . opt_right_parentheses

    opt_plus               shift, and go to state 160
    opt_minus              shift, and go to state 161
    opt_times              shift, and go to state 162
    opt_divide             shift, and go to state 163
    opt_mod                shift, and go to state 164
    opt_lower              shift, and go to state 165
    opt_lower_equal        shift, and go to state 166
    opt_greater            shift, and go to state 167
    opt_greater_equal      shift, and go to state 168
    opt_equal              shift, and go to state 169
    opt_not_equal          shift, and go to state 170
    opt_and                shift, and go to state 171
    opt_or                 shift, and go to state 172
    opt_dot                shift, and go to state 173
    opt_left_bracket       shift, and go to state 174
    opt_right_parentheses  shift, and go to state 246

    VALUE_P  go to state 175


State 245

   69 FOR_STMT: vip_for opt_left_parentheses EXPRESSION_Q opt_semicolon EXPRESSION opt_semicolon EXPRESSION_Q opt_right_parentheses . STATEMENT

    error                 shift, and go to state 1
    vip_null              shift, and go to state 104
    vip_this              shift, and go to state 105
    vip_for               shift, and go to state 106
    vip_while             shift, and go to state 107
    vip_if                shift, and go to state 108
    vip_return            shift, and go to state 109
    vip_break             shift, and go to state 110
    vip_New               shift, and go to state 111
    vip_NewArray          shift, and go to state 112
    vip_Print             shift, and go to state 113
    vip_ReadInteger       shift, and go to state 114
    vip_ReadLine          shift, and go to state 115
    vip_Malloc            shift, and go to state 116
    identifier            shift, and go to state 117
    num_int               shift, and go to state 118
    num_hex               shift, and go to state 119
    num_double            shift, and go to state 120
    val_string            shift, and go to state 121
    val_bool              shift, and go to state 122
    opt_minus             shift, and go to state 123
    opt_not               shift, and go to state 124
    opt_left_brace        shift, and go to state 90
    opt_left_parentheses  shift, and go to state 125

    opt_semicolon  reduce using rule 74 (EXPRESSION_Q)

    STMT_BLOCK    go to state 126
    STATEMENT     go to state 247
    IF_STMT       go to state 129
    WHILE_STMT    go to state 130
    FOR_STMT      go to state 131
    RETURN_STMT   go to state 132
    BREAK_STMT    go to state 133
    PRINT_STMT    go to state 134
    EXPRESSION_Q  go to state 135
    EXPRESSION    go to state 136
    VALUE         go to state 137
    CALL          go to state 138
    CONST         go to state 139
    ERR           go to state 140


State 246

  111 LIB_CALL: vip_SetByte opt_left_parentheses EXPRESSION opt_coma EXPRESSION opt_right_parentheses .

    $default  reduce using rule 111 (LIB_CALL)


State 247

   69 FOR_STMT: vip_for opt_left_parentheses EXPRESSION_Q opt_semicolon EXPRESSION opt_semicolon EXPRESSION_Q opt_right_parentheses STATEMENT .

    $default  reduce using rule 69 (FOR_STMT)
